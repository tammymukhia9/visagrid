###----------------Step 1--------------------###

 rails generate scaffold User user_id:integer last_name:string first_name:string country_id:integer

 rails generate scaffold Member user_id:integer last_name:string first_name:string username:string password:string email:string contact_number:string

 rails generate scaffold Country country_id:integer country_name:string continent_id:integer

 rails generate scaffold Continent continent_id:integer continent_name:string

 rails generate scaffold User_log log_id:integer user_id:integer visa_info_id:integer logged_date:timestamp

 
 rails generate scaffold Visit_purpose visit_id:integer visit_name:string visit_info:text

 rails generate scaffold Visa_info visa_info_id:integer visa_info:text links:text

 rake db:migrate

###----------------Step 2--------------------###

 > rails destroy scaffold User
 > rails destroy scaffold Member
 > rails destroy scaffold Visa_info

 ###----------------Step 3--------------------###

 rails generate scaffold User first_name:string last_name:string 

 rails generate scaffold Guest_user guest_user_id:integer user_id:integer country_id:integer

 rails generate scaffold Member member_id:integer user_id:integer username:string password:string email:string contact_number:string country_id:integer

 
 rails generate scaffold Country country_name:string

###----------------Step 4--------------------###

In User Model,
	validates :user_id, :last_name, :first_name, presence:true

In Country Model
class Country < ApplicationRecord
	has_many :users
	has_many :src, :class_name => 'Visa_info', :foreign_key => 'source_id'
	has_many :dest, :class_name => 'Visa_info', :foreign_key => 'destination_id'
	has_many :citiz, :class_name => 'Visa_info', :foreign_key => 'nationality_id'
end

 
###----------------Step 5--------------------###

      ---------User form:

     <div class="field">
    
    <%= form.label :country_id%>
    <%= form.select :country_id,
        options_for_select(Country.all.collect{|a| ["#{a.country_name}", a.id]},
        selected: (@user.country ? @user.country.id : Country.first.id)
        ),
        {} %>
  </div>

  -----------User index:

    <td>
          <%= (user.country.try(:country_name))||"NA" %>
            
        </td>


   --------User show:

   <p>
	<strong>Country:</strong>
	<%= (user.country.try(:country_name) || "NA")

	%>

</p>


 ###----------------Step 6--------------------###

 class AddCountryToVisaInfo < ActiveRecord::Migration[5.2]
  def change
    # add_reference :visa_infos, :country, foreign_key: true
    add_column :visa_infos, :source_id, :integer
    add_column :visa_infos, :destination_id, :integer
    add_column :visa_infos, :nationality_id, :integer
  end
end

###-------------------Step 7-------------------###

>(from step 3)rails generate scaffold User first_name:string last_name:string 
>rails destroy scaffold Guest_user
>rails destroy scaffold Member
>rails generate scaffold Member username:string password:string email:string contact_number:string
>rails destroy scaffold Visa_info
>rails generate scaffold Visa_info visa_info:text links:text
>rails destroy scaffold Continent
>rails destroy scaffold Guest_user
>rails destroy scaffold User_log
>rails destroy scaffold Visit_purpose
>rails generate scaffold Visit_purpose visit_name:string visit_info:text
>rails destroy scaffold Member
>rails generate scaffold Member mem_first_name:string mem_last_name:string username:string password:string email:string





-------------------------Database------------------------

rake db:drop db:create db:migrate




---------------Visa Info controller-------------------------

def visa_info_params
      params.require(:visa_info).permit(:visa_info_id, :visa_info, :links, :source_id, :destination_id, :nationality_id)
end


----------------Visa Info model-----------------------------

class VisaInfo < ApplicationRecord
  belongs_to :source, :class_name => 'Country', :foreign_key => 'source_id'
  belongs_to :destination, :class_name => 'Country', :foreign_key => 'destination_id'
  belongs_to :nationality, :class_name => 'Country', :foreign_key => 'nationality_id'
end


--------------- View - Visa Info - form---------------------

  <div class="field">
    
    <%= form.label :source_id%>
    <%= form.select :source_id,
        options_for_select(Country.all.collect{|s| ["#{s.country_name}", s.id]},
        selected: (@visa_info.source ? @visa_info.source.id : Country.first.id)
        ),
        {} %>
  </div>

  <div class="field">
    
    <%= form.label :destination_id%>
    <%= form.select :destination_id,
        options_for_select(Country.all.collect{|d| ["#{d.country_name}", d.id]},
        selected: (@visa_info.destination ? @visa_info.destination.id : Country.first.id)
        ),
        {} %>
  </div>

  <div class="field">
    
    <%= form.label :nationality_id%>
    <%= form.select :nationality_id,
        options_for_select(Country.all.collect{|n| ["#{n.country_name}", n.id]},
        selected: (@visa_info.nationality ? @visa_info.nationality.id : Country.first.id)
        ),
        {} %>
  </div>


  -------------------Drop table statement----------------------

  drop_table(:visa_infos, if_exists: true)


  ------------------Association--------------------------------

  class AddCountryToVisaInfo < ActiveRecord::Migration[5.2]
  def change
    # add_reference :visa_infos, :country, foreign_key: true
    add_column :visa_infos, :source_id, :integer
    add_column :visa_infos, :destination_id, :integer
    add_column :visa_infos, :nationality_id, :integer
  end
end

   -------------------Visa Info & Visit Purpose----------------

   rails g migration AddVisitPurposeToVisaInfo visit_purpose:references
   
   Models
   Visa Info - belongs_to visit_purpose
   Visit Purpose - has many visa infos

   ------------------Blog creation-------------
   
   rails g scaffold Blog title:string article:text
   rails destroy scaffold Blog
   rails g scaffold Blog title:string title_description:text article:text image:string
   drop_table(:blogs, if_exists: true)


   In blog > view > show.html.erb, insert
        <%=raw @blog.article%> 

        (This takes in HTML tags )

   ------------------Seeds file--------------------

  VisaInfo.create(visa_info: 'Hello hello world', links: 'tt.com', source: Country.find_by(id: 2), destination: Country.find_by(id: 3), nationality: Country.find_by(id: 4), visit_purpose: VisitPurpose.find_by(id: 1))

  ------------------ New field added--------------
  
  rails generate migration add_fieldname_to_tablename fieldname:string 


 > $rake db:migrate:redo (This will roll back the last migration and migrate it again.)

 change controller
 > "rails destroy migration migration_name" (migration_name is the one use chose while creating migration. Remove "timestamp_" from your migration file name to get it)

 <% if signed_in? %>
      Signed in as: <%= current_user.email %>
      <%= button_to 'Sign out', sign_out_path, method: :delete %>
    <% else %>
      <%= link_to 'Sign in', sign_in_path %>
    <% end %>

    <div id="flash">
      <% flash.each do |key, value| %>
        <div class="flash <%= key %>"><%= value %></div>
      <% end %>
    </div>


class AddClearanceToMembers < ActiveRecord::Migration[5.2]
  def self.up
    change_table :members do |t|
      t.string :email
      t.string :encrypted_password, limit: 128
      t.string :confirmation_token, limit: 128
      t.string :remember_token, limit: 128
    end

    add_index :members, :email
    add_index :members, :remember_token

    members = select_all("SELECT id FROM members WHERE remember_token IS NULL")

    members.each do |member|
      update <<-SQL
        UPDATE members
        SET remember_token = '#{Clearance::Token.new}'
        WHERE id = '#{member['id']}'
      SQL
    end
  end

  def self.down
    change_table :members do |t|
      t.remove :email, :encrypted_password, :confirmation_token, :remember_token
    end
  end
end

--------------------TinyMCE WYSIWYG editor---------------------

gem 'tinymce-rails'
-----------------------------------------------
1) Add to your application.js:

//= require tinymce
or (2) with jQuery integration:

//= require tinymce-jquery

(3) The TinyMCE assets can be included on a per-page basis using the tinymce_assets helper:

<%= tinymce_assets %>
#=> <script type="text/javascript" src="/assets/tinymce.js">
-----------------------------------------------

<%= f.text_area :content, :class => "tinymce", :rows => 40, :cols => 120 %>

Invoke: <%= tinymce %>
-------------------------------------------------------------------

> rails generate scaffold Comment body:text


-------------------------------------------------------------------

validates :mem_first_name, :mem_last_name, presence: true
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, length: {maximum: 105},
  uniqueness: { case_sensitive: false },
  format: { with: VALID_EMAIL_REGEX } 

  validates :username, uniqueness: {case_sensitive: false}

  validates :password, :confirmation => true
